import torch
import math

PHYSICHE_PROPERTIES = {
    "A": [0.51, 0.169, 0.471, 0.279, 0.141, 0.294, 0, 0.262, 0.512, 0, 0.404],
    "R": [0.667, 0.726, 0.321, 1, 0.905, 0.529, 0.327, 0.169, 0.372, 1, 1],
    "N": [0.745, 0.39, 0.164, 0.658, 0.51, 0.235, 0.14, 0.313, 0.116, 0.065, 0.33],
    "D": [0.745, 0.304, 0.021, 0.793, 0.515, 0.235, 0.14, 0.601, 0.14, 0.956, 0],
    "C": [0.608, 0.314, 0.76, 0.072, 0, 0.559, 0.14, 0.947, 0.907, 0.028, 0.285],
    "Q": [0.667, 0.531, 0.178, 0.649, 0.608, 0.529, 0.14, 0.416, 0.023, 0.068, 0.36],
    "E": [0.667, 0.482, 0.092, 0.883, 0.602, 0.529, 0.14, 0.561, 0.163, 0.96, 0.056],
    "G": [0, 0, 0.275, 0.189, 0.103, 0, 0, 0.24, 0.581, 0, 0.401],
    "H": [0.686, 0.554, 0.326, 0.468, 0.402, 0.529, 0.14, 0.313, 0.581, 0.992, 0.603],
    "I": [1, 0.65, 1, 0, 0.083, 0.824, 0.308, 0.424, 0.93, 0.003, 0.407],
    "L": [0.961, 0.65, 0.734, 0.081, 0.138, 0.824, 0.308, 0.463, 0.907, 0.003, 0.402],
    "K": [0.667, 0.692, 0, 0.568, 1, 0.529, 0.327, 0.313, 0, 0.952, 0.872],
    "M": [0.765, 0.612, 0.603, 0.171, 0.206, 0.765, 0.308, 0.405, 0.814, 0.028, 0.372],
    "F": [0.686, 0.772, 0.665, 0, 0.114, 0.853, 0.682, 0.462, 1, 0.007, 0.339],
    "P": [0.353, 0.372, 0.012, 0.198, 0.411, 0.588, 0.271, 0, 0.302, 0.03, 0.442],
    "S": [0.52, 0.172, 0.155, 0.477, 0.303, 0.206, 0, 0.24, 0.419, 0.032, 0.364],
    "T": [0.49, 0.349, 0.256, 0.523, 0.337, 0.235, 0.14, 0.313, 0.419, 0.032, 0.362],
    "W": [0.686, 1, 0.681, 0.207, 0.219, 1, 1, 0.537, 0.674, 0.04, 0.39],
    "Y": [0.686, 0.796, 0.591, 0.477, 0.454, 0.853, 0.682, 1, 0.419, 0.031, 0.362],
    "V": [0.745, 0.487, 0.859, 0.036, 0.094, 0.647, 0.234, 0.369, 0.674, 0.003, 0.399],
}

BLOSUM80 = {
    'A': [5, -2, -2, -2, -1, -1, -1, 0, -2, -2, -2, -1, -1, -3, -1, 1, 0, -3, -2, 0, -2, -2, -1, -1, -6],
    'R': [-2, 6, -1, -2, -4,  1, -1, -3, 0, -3, -3,  2, -2, -4, -2, -1, -1, -4, -3, -3, -1, -3,  0, -1, -6],
    'N': [-2, -1, 6, 1, -3, 0, -1, -1,  0, -4, -4, 0, -3, -4, -3, 0, 0, -4, -3, -4, 5, -4, 0, -1, -6],
    'D': [-2, -2, 1, 6, -4, -1, 1, -2, -2, -4, -5, -1, -4, -4, -2, -1, -1, -6, -4, -4, 5, -5, 1, -1, -6],
    'C': [-1, -4, -3, -4, 9, -4, -5, -4, -4, -2, -2, -4, -2, -3, -4, -2, -1, -3, -3, -1, -4, -2, -4, -1, -6],
    'Q': [-1, 1, 0, -1, -4, 6, 2, -2,  1, -3, -3, 1, 0, -4, -2, 0, -1, -3, -2, -3, 0, -3, 4, -1, -6],
    'E': [-1, -1, -1, 1, -5, 2, 6, -3, 0, -4, -4, 1, -2, -4, -2, 0, -1, -4, -3, -3, 1, -4, 5, -1, -6],
    'G': [0, -3, -1, -2, -4, -2, -3, 6, -3, -5, -4, -2, -4, -4, -3, -1, -2, -4, -4, -4, -1, -5, -3, -1, -6],
    'H': [-2, 0, 0, -2, -4, 1, 0, -3, 8, -4, -3, -1, -2, -2, -3, -1, -2, -3, 2, -4, -1, -4, 0, -1, -6],
    'I': [-2, -3, -4, -4, -2, -3, -4, -5, -4, 5, 1, -3, 1, -1, -4, -3, -1, -3, -2, 3, -4, 3, -4, -1, -6],
    'L': [-2, -3, -4, -5, -2, -3, -4, -4, -3, 1, 4, -3, 2, 0, -3, -3, -2, -2, -2, 1, -4, 3, -3, -1, -6],
    'K': [-1, 2, 0, -1, -4, 1, 1, -2, -1, -3, -3, 5, -2, -4, -1, -1, -1, -4, -3, -3, -1, -3, 1, -1, -6],
    'M': [-1, -2, -3, -4, -2, 0, -2, -4, -2, 1, 2, -2, 6, 0, -3, -2, -1, -2, -2, 1, -3, 2, -1, -1, -6],
    'F': [-3, -4, -4, -4, -3, -4, -4, -4, -2, -1, 0, -4, 0, 6, -4, -3, -2, 0, 3, -1, -4, 0, -4, -1, -6],
    'P': [-1, -2, -3, -2, -4, -2, -2, -3, -3, -4, -3, -1, -3, -4, 8, -1, -2, -5, -4, -3, -2, -4, -2, -1, -6],
    'S': [1, -1, 0, -1, -2, 0, 0, -1, -1, -3, -3, -1, -2, -3, -1, 5, 1, -4, -2, -2, 0, -3, 0, -1, -6],
    'T': [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -2, -1, -1, -2, -2, 1, 5, -4, -2, 0, -1, -1, -1, -1, -6],
    'W': [-3, -4, -4, -6, -3, -3, -4, -4, -3, -3, -2, -4, -2, 0, -5, -4, -4, 11, 2, -3, -5, -3, -3, -1, -6],
    'Y': [-2, -3, -3, -4, -3, -2, -3, -4, 2, -2, -2, -3, -2, 3, -4, -2, -2, 2, 7, -2, -3, -2, -3, -1, -6],
    'V': [0, -3, -4, -4, -1, -3, -3, -4, -4, 3, 1, -3, 1, -1, -3, -2, 0, -3, -2, 4, -4, 2, -3, -1, -6],
    'B': [-2, -1, 5, 5, -4, 0, 1, -1, -1, -4, -4, -1, -3, -4, -2, 0, -1, -5, -3, -4, 5, -4, 0 -11, -6],
    'J': [-2, -4, -5, -2, -3, -4, -5, -4, 3, 3, -3, 2, 0, -4, -3, -1, -3, -2, 2, -4, 3, -3, -1, -6],
    'Z': [-1, 0, 0, 1, -4, 4, 5, -3, 0, -4, -3, 1, -1, -4, -2, 0, -1, -3, -3, -3, 0, -3, 5, -1, -6],
    'X': [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -6],
    '*': [-6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6, -6,  1]
}

EDSSMat62 = {
    'A': [0.4,-0.3,-0.2,-0.2,-0.1,-0.2,-0.2,0,-0.2,-0.1,-0.2,-0.2,-0.1,-0.2,-0.1,0,0.1,-0.4,-0.3,0.1,-0.2,-0.2,-0.1,-0.4],
    'R': [-0.3,0.6,-0.2,-0.4,-0.1,0,-0.3,-0.2,0,-0.3,-0.3,0.1,-0.2,-0.3,-0.3,-0.2,-0.3,0,-0.2,-0.3,-0.3,-0.2,-0.2,-0.4],
    'N': [-0.2,-0.2,0.6,0,-0.1,-0.1,-0.2,-0.1,0.1,-0.2,-0.3,-0.1,-0.3,-0.3,-0.3,0,0,-0.3,-0.1,-0.2,3,-0.2,-0.1,-0.4],
    'D': [-0.2,-0.4,0,0.6,-0.3,-0.2,0.2,-0.1,-0.2,-0.4,-0.4,-0.3,-0.4,-0.4,-0.4,-0.2,-0.3,-0.4,-0.2,-0.3,3,0,-0.2,-0.4],
    'C': [-0.1,-0.1,-0.1,-0.3,1.2,-0.3,-0.4,0,0,-0.1,-0.1,-0.4,-0.2,0.1,-0.2,0,-0.2,0.2,0.3,0,-0.2,-0.4,0,-0.4],
    'Q': [-0.2,0,-0.1,-0.2,-0.3,0.6,-0.1,-0.3,0.2,-0.2,-0.1,0,-0.1,-0.3,-0.1,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,0.2,-0.1,-0.4],
    'E': [-0.2,-0.3,-0.2,0.2,-0.4,-0.1,0.5,-0.2,-0.2,-0.3,-0.4,-0.1,-0.4,-0.4,-0.3,-0.3,-0.2,-0.4,-0.4,-0.2,0,2,-0.2,-0.4],
    'G': [0,-0.2,-0.1,-0.1,0,-0.3,-0.2,0.5,-0.2,-0.3,-0.4,-0.3,-0.3,-0.4,-0.3,-0.1,-0.2,-0.3,-0.3,-0.1,-0.1,-0.2,-0.2,-0.4],
    'H': [-0.2,0,0.1,-0.2,0,0.2,-0.2,-0.2,0.8,-0.2,-0.1,-0.2,-0.2,0,-0.1,-0.2,-0.2,-0.2,0.2,-0.3,0,0,-0.1,-0.4],
    'I': [-0.1,-0.3,-0.2,-0.4,-0.1,-0.2,-0.3,-0.3,-0.2,0.8,0.2,-0.3,0.3,0.1,-0.3,-0.2,0,-0.2,-0.1,3,-0.3,-0.2,-0.1,-0.4],
    'L': [-0.2,-0.3,-0.3,-0.4,-0.1,-0.1,-0.4,-0.4,-0.1,0.2,0.7,-0.3,0.2,0.2,-0.1,-0.2,-0.2,-0.1,-0.1,0.1,-0.4,-0.2,-0.1,-0.4],
    'K': [-0.2,0.1,-0.1,-0.3,-0.4,0,-0.1,-0.3,-0.2,-0.3,-0.3,0.6,-0.2,-0.4,-0.3,-0.3,-0.2,-0.4,-0.4,-0.3,-0.2,0,-0.2,-0.4],
    'M': [-0.1,-0.2,-0.3,-0.4,-0.2,-0.1,-0.4,-0.3,-0.2,0.3,0.2,-0.2,0.9,0,-0.3,-0.2,0,-0.2,-0.2,0.2,-0.4,-0.2,-0.1,-0.4],
    'F': [-0.2,-0.3,-0.3,-0.4,0.1,-0.3,-0.4,-0.4,0,0.1,2,-0.4,0,1.0,-0.3,-0.2,-0.2,0.1,4,0,-0.4,-0.4,-0.1,-0.4],
    'P': [-0.1,-0.3,-0.3,-0.4,-0.2,-0.1,-0.3,-0.3,-0.1,-0.3,-0.1,-0.3,-0.3,-0.3,0.4,-0.1,-0.1,-0.4,-0.3,-0.2,-0.4,-0.2,-0.2,-0.4],
    'S': [0,-0.2,0,-0.2,0,-0.2,-0.3,-0.1,-0.2,-0.2,-0.2,-0.3,-0.2,-0.2,-0.1,4,0,-0.3,-0.2,-0.2,-0.1,-0.2,-0.1,-0.4],
    'T': [0.1,-0.3,0,-0.3,-0.2,-0.2,-0.2,-0.2,-0.2,0,-0.2,-0.2,0,-0.2,-0.1,0,0.5,-0.4,-0.3,0,-0.2,-0.2,-0.1,-0.4],
    'W': [-0.4,0,-0.3,-0.4,2,-0.2,-0.4,-0.3,-0.2,-0.2,-0.1,-0.4,-0.2,0.1,-0.4,-0.3,-0.4,1.4,0.2,-0.2,-0.4,-0.3,-0.1,-0.4],
    'Y': [-0.3,-0.2,-0.1,-0.2,0.3,-0.2,-0.4,-0.3,0.2,-0.1,-0.1,-0.4,-0.2,0.4,-0.3,-0.2,-0.3,0.2,1.1,-0.1,-0.2,-0.3,-0.1,-0.4],
    'V': [0.1,-0.3,-0.2,-0.3,0,-0.2,-0.2,-0.1,-0.3,0.3,0.1,-0.3,0.2,0,-0.2,-0.2,0,-0.2,-0.1,0.6,-0.2,-0.2,-0.1,-0.4],
    'B': [-0.2,-0.3,0.3,0.3,-0.2,-0.2,0,-0.1,0,-0.3,-0.4,-0.2,-0.4,-0.4,-0.4,-0.1,-0.2,-0.4,-0.2,-0.2,0.3,0.3,0,-0.4],
    'Z': [-0.2,-0.2,-0.2,0,-0.4,0.2,0.2,-0.2,0,-0.2,-0.2,0,-0.2,-0.4,-0.2,-0.2,-0.2,-0.3,-0.3,-0.2,0.3,0.2,0,-0.4],
    'X': [-0.1,-0.2,-0.1,-0.2,0,-0.1,-0.2,-0.2,-0.1,-0.1,-0.1,-0.2,-0.1,-0.1,-0.2,-0.1,-0.1,-0.1,-0.1,-0.1,0,0,-0.1,-0.4],
}

BLOSUM62 = {
    'A': [4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0, -2, -1, 0],
    'R': [-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3, -1, 0, -1],
    'N': [-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3, 3, 0, -1],
    'D': [-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3, 4, 1, -1],
    'C': [0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2],
    'Q': [-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2, 0, 3, -1],
    'E': [-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
    'G': [0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3, -1, -2, -1],
    'H': [-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3, 0, 0, -1],
    'I': [-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3, -3, -3, -1],
    'L': [-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1, -4, -3, -1],
    'K': [-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2, 0, 1, -1],
    'M': [-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1, -3, -1, -1],
    'F': [-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1, -3, -3, -1],
    'P': [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2, -2, -1, -2],
    'S': [1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2, 0, 0, 0],
    'T': [0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0, -1, -1, 0],
    'W': [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3, -4, -3, -2],
    'Y': [-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1, -3, -2, -1],
    'V': [0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4, -3, -2, -1],
    'B': [-2, -1, 3, 4, -3, 0, 1, -1, 0, -3, -4, 0, -3, -3, -2, 0, -1, -4, -3, -3, 4, 1, -1],
    'Z': [-1, 0, 0, 1, -3, 3, 4, -2, 0, -3, -3, 1, -1, -3, -1, 0, -1, -3, -2, -2, 1, 4, -1],
    'X': [0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, 0, 0, -2, -1, -1, -1, -1, -1],
}

BLOSUM62_N = {
 "A": [0.533, 0.2, 0.133, 0.133, 0.267, 0.2, 0.2, 0.267, 0.133, 0.2, 0.2, 0.2, 0.2, 0.133, 0.2, 0.333, 0.267, 0.067, 0.133, 0.267, 0.133, 0.2, 0.267], 
 "R": [0.2, 0.6, 0.267, 0.133, 0.067, 0.333, 0.267, 0.133, 0.267, 0.067, 0.133, 0.4, 0.2, 0.067, 0.133, 0.2, 0.2, 0.067, 0.133, 0.067, 0.2, 0.267, 0.2], 
 "N": [0.133, 0.267, 0.667, 0.333, 0.067, 0.267, 0.267, 0.267, 0.333, 0.067, 0.067, 0.267, 0.133, 0.067, 0.133, 0.333, 0.267, 0.0, 0.133, 0.067, 0.467, 0.267, 0.2], 
 "D": [0.133, 0.133, 0.333, 0.667, 0.067, 0.267, 0.4, 0.2, 0.2, 0.067, 0.0, 0.2, 0.067, 0.067, 0.2, 0.267, 0.2, 0.0, 0.067, 0.067, 0.533, 0.333, 0.2], 
 "C": [0.267, 0.067, 0.067, 0.067, 0.867, 0.067, 0.0, 0.067, 0.067, 0.2, 0.2, 0.067, 0.2, 0.133, 0.067, 0.2, 0.2, 0.133, 0.133, 0.2, 0.067, 0.067, 0.133], 
 "Q": [0.2, 0.333, 0.267, 0.267, 0.067, 0.6, 0.4, 0.133, 0.267, 0.067, 0.133, 0.333, 0.267, 0.067, 0.2, 0.267, 0.2, 0.133, 0.2, 0.133, 0.267, 0.467, 0.2], 
 "E": [0.2, 0.267, 0.267, 0.4, 0.0, 0.4, 0.6, 0.133, 0.267, 0.067, 0.067, 0.333, 0.133, 0.067, 0.2, 0.267, 0.2, 0.067, 0.133, 0.133, 0.333, 0.533, 0.2], 
 "G": [0.267, 0.133, 0.267, 0.2, 0.067, 0.133, 0.133, 0.667, 0.133, 0.0, 0.0, 0.133, 0.067, 0.067, 0.133, 0.267, 0.133, 0.133, 0.067, 0.067, 0.2, 0.133, 0.2], 
 "H": [0.133, 0.267, 0.333, 0.2, 0.067, 0.267, 0.267, 0.133, 0.8, 0.067, 0.067, 0.2, 0.133, 0.2, 0.133, 0.2, 0.133, 0.133, 0.4, 0.067, 0.267, 0.267, 0.2], 
 "I": [0.2, 0.067, 0.067, 0.067, 0.2, 0.067, 0.067, 0.0, 0.067, 0.533, 0.4, 0.067, 0.333, 0.267, 0.067, 0.133, 0.2, 0.067, 0.2, 0.467, 0.067, 0.067, 0.2], 
 "L": [0.2, 0.133, 0.067, 0.0, 0.2, 0.133, 0.067, 0.0, 0.067, 0.4, 0.533, 0.133, 0.4, 0.267, 0.067, 0.133, 0.2, 0.133, 0.2, 0.333, 0.0, 0.067, 0.2], 
 "K": [0.2, 0.4, 0.267, 0.2, 0.067, 0.333, 0.333, 0.133, 0.2, 0.067, 0.133, 0.6, 0.2, 0.067, 0.2, 0.267, 0.2, 0.067, 0.133, 0.133, 0.267, 0.333, 0.2], 
 "M": [0.2, 0.2, 0.133, 0.067, 0.2, 0.267, 0.133, 0.067, 0.133, 0.333, 0.4, 0.2, 0.6, 0.267, 0.133, 0.2, 0.2, 0.2, 0.2, 0.333, 0.067, 0.2, 0.2], 
 "F": [0.133, 0.067, 0.067, 0.067, 0.133, 0.067, 0.067, 0.067, 0.2, 0.267, 0.267, 0.067, 0.267, 0.667, 0.0, 0.133, 0.133, 0.333, 0.467, 0.2, 0.067, 0.067, 0.2], 
 "P": [0.2, 0.133, 0.133, 0.2, 0.067, 0.2, 0.2, 0.133, 0.133, 0.067, 0.067, 0.2, 0.133, 0.0, 0.733, 0.2, 0.2, 0.0, 0.067, 0.133, 0.133, 0.2, 0.133], 
 "S": [0.333, 0.2, 0.333, 0.267, 0.2, 0.267, 0.267, 0.267, 0.2, 0.133, 0.133, 0.267, 0.2, 0.133, 0.2, 0.533, 0.333, 0.067, 0.133, 0.133, 0.267, 0.267, 0.267], 
 "T": [0.267, 0.2, 0.267, 0.2, 0.2, 0.2, 0.2, 0.133, 0.133, 0.2, 0.2, 0.2, 0.2, 0.133, 0.2, 0.333, 0.6, 0.133, 0.133, 0.267, 0.2, 0.2, 0.267], 
 "W": [0.067, 0.067, 0.0, 0.0, 0.133, 0.133, 0.067, 0.133, 0.133, 0.067, 0.133, 0.067, 0.2, 0.333, 0.0, 0.067, 0.133, 1.0, 0.4, 0.067, 0.0, 0.067, 0.133], 
 "Y": [0.133, 0.133, 0.133, 0.067, 0.133, 0.2, 0.133, 0.067, 0.4, 0.2, 0.2, 0.133, 0.2, 0.467, 0.067, 0.133, 0.133, 0.4, 0.733, 0.2, 0.067, 0.133, 0.2], 
 "V": [0.267, 0.067, 0.067, 0.067, 0.2, 0.133, 0.133, 0.067, 0.067, 0.467, 0.333, 0.133, 0.333, 0.2, 0.133, 0.133, 0.267, 0.067, 0.2, 0.533, 0.067, 0.133, 0.2], 
 "B": [0.133, 0.2, 0.467, 0.533, 0.067, 0.267, 0.333, 0.2, 0.267, 0.067, 0.0, 0.267, 0.067, 0.067, 0.133, 0.267, 0.2, 0.0, 0.067, 0.067, 0.533, 0.333, 0.2], 
 "Z": [0.2, 0.267, 0.267, 0.333, 0.067, 0.467, 0.533, 0.133, 0.267, 0.067, 0.067, 0.333, 0.2, 0.067, 0.2, 0.267, 0.2, 0.067, 0.133, 0.133, 0.333, 0.533, 0.2], 
 "X": [0.267, 0.2, 0.2, 0.2, 0.133, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.133, 0.267, 0.267, 0.133, 0.2, 0.2, 0.2, 0.2, 0.2]

}


# Fix the order
AMINO_ACIDS = [x for x in PHYSICHE_PROPERTIES]
AMINO_ACIDS.sort()


def one_hot_encode(seq, max_len, smooth=False):

    mask = torch.zeros((max_len))
    if smooth:
        tensor = torch.rand((len(AMINO_ACIDS),max_len)) / 10
    else:
        tensor = torch.zeros((len(AMINO_ACIDS),max_len))
    
    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in AMINO_ACIDS:
            tensor[AMINO_ACIDS.index(aa.upper())][i] = 1.0
            mask[i] = 1.0

    return tensor, mask


def physical_encode(seq, max_len):
    """Encode sequence with PHYSICHE_PROPERTIES encoding. 1d or 2d
    """
    mask = torch.zeros((max_len))
    tensor = torch.zeros((11, max_len))

    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in PHYSICHE_PROPERTIES:
            tensor[:, i] = torch.tensor(PHYSICHE_PROPERTIES[aa.upper()])
            mask[i] = 1.0
    

    return tensor, mask

def blosum80_encode(seq, max_len):

    tensor = torch.zeros((25,max_len))
    mask = torch.zeros((max_len))

    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in BLOSUM80:
            tensor[:,i] = torch.tensor(BLOSUM80[aa.upper()])
            mask[i] = 1.0
    return tensor, mask


def EDSSMat62_encode(seq, max_len):

    tensor = torch.zeros((24,max_len))
    mask = torch.zeros((max_len))

    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in EDSSMat62:
            tensor[:,i] = torch.tensor(EDSSMat62[aa.upper()])
            mask[i] = 1.0
    return tensor, mask


def blosum_encode(seq, max_len):

    tensor = torch.zeros((23,max_len))
    mask = torch.zeros((max_len))

    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in BLOSUM62:
            tensor[:,i] = torch.tensor(BLOSUM62[aa.upper()])
            mask[i] = 1.0
    return tensor, mask


def N_blosum_encode(seq, max_len):

    tensor = torch.zeros((23,max_len))
    mask = torch.zeros((max_len))

    for i, aa in enumerate(seq):
        # if it is gap or missing, all channels will be zero
        if aa.upper() in BLOSUM62_N:
            tensor[:,i] = torch.tensor(BLOSUM62_N[aa.upper()])
            mask[i] = 1.0
    return tensor, mask


def one_hot_PLUS_blosum_encode(seq, max_len, smooth=False):
    """One hot PLUS blosum encoding [43]
    """
    mask = torch.zeros((max_len))
    #last_valid_index = -1
    dim = len(AMINO_ACIDS) + 23
    if smooth:
        tensor = torch.rand((max_len, dim), dtype=torch.float) / 10
    else:
        tensor = torch.zeros((max_len, dim), dtype=torch.float)

    for i, aa in enumerate(seq):
        if aa.upper() in AMINO_ACIDS:
            tensor[i][AMINO_ACIDS.index(aa.upper())] = 1.0
            tensor[i][len(AMINO_ACIDS):] = torch.tensor(BLOSUM62[aa.upper()])
            mask[i] = 1.0
            #last_valid_index = max(last_valid_index, i)

    return tensor, mask

ENCODING_METHOD_MAP = {
    'one_hot+blosum': one_hot_PLUS_blosum_encode,
    'one_hot': one_hot_encode,
    'physical': physical_encode,
    'blosum': blosum_encode,
    'blosum80': blosum80_encode,
    'EDSSMat62': EDSSMat62_encode,
    'N_blosum': N_blosum_encode
}




def main():
    test_encode()


if __name__ == '__main__':
    main()
    pass